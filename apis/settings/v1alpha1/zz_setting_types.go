// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SettingInitParameters struct {

	// (List of Map of String) Setting field values for the supplied key
	// Setting field values for the supplied key
	FieldValues []map[string]*string `json:"fieldValues,omitempty" tf:"field_values,omitempty"`

	// (String) Setting key
	// Setting key
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Setting value. To reset a value, please use the reset web service.
	// Setting value. To reset a value, please use the reset web service.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (List of String) Setting multi values for the supplied key
	// Setting multi values for the supplied key
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SettingObservation struct {

	// (List of Map of String) Setting field values for the supplied key
	// Setting field values for the supplied key
	FieldValues []map[string]*string `json:"fieldValues,omitempty" tf:"field_values,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Setting key
	// Setting key
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Setting value. To reset a value, please use the reset web service.
	// Setting value. To reset a value, please use the reset web service.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (List of String) Setting multi values for the supplied key
	// Setting multi values for the supplied key
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SettingParameters struct {

	// (List of Map of String) Setting field values for the supplied key
	// Setting field values for the supplied key
	// +kubebuilder:validation:Optional
	FieldValues []map[string]*string `json:"fieldValues,omitempty" tf:"field_values,omitempty"`

	// (String) Setting key
	// Setting key
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Setting value. To reset a value, please use the reset web service.
	// Setting value. To reset a value, please use the reset web service.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (List of String) Setting multi values for the supplied key
	// Setting multi values for the supplied key
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

// SettingSpec defines the desired state of Setting
type SettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SettingInitParameters `json:"initProvider,omitempty"`
}

// SettingStatus defines the observed state of Setting.
type SettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Setting is the Schema for the Settings API. Provides a Sonarqube Settings resource. This can be used to manage Sonarqube settings.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,sonarqube}
type Setting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	Spec   SettingSpec   `json:"spec"`
	Status SettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingList contains a list of Settings
type SettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Setting `json:"items"`
}

// Repository type metadata.
var (
	Setting_Kind             = "Setting"
	Setting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Setting_Kind}.String()
	Setting_KindAPIVersion   = Setting_Kind + "." + CRDGroupVersion.String()
	Setting_GroupVersionKind = CRDGroupVersion.WithKind(Setting_Kind)
)

func init() {
	SchemeBuilder.Register(&Setting{}, &SettingList{})
}
