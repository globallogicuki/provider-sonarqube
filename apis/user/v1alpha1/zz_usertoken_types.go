// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserTokenInitParameters struct {

	// MM-DD). If not set, default to no expiration.
	// The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// (String) The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	// The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/globallogicuki/provider-sonarqube/apis/user/v1alpha1.User
	LoginName *string `json:"loginName,omitempty" tf:"login_name,omitempty"`

	// Reference to a User in user to populate loginName.
	// +kubebuilder:validation:Optional
	LoginNameRef *v1.Reference `json:"loginNameRef,omitempty" tf:"-"`

	// Selector for a User in user to populate loginName.
	// +kubebuilder:validation:Optional
	LoginNameSelector *v1.Selector `json:"loginNameSelector,omitempty" tf:"-"`

	// (String) The name of the Token to create. Changing this forces a new resource to be created.
	// The name of the Token to create. Changing this forces a new resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	// The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER_TOKEN, GLOBAL_ANALYSIS_TOKEN, or PROJECT_ANALYSIS_TOKEN. Defaults to USER_TOKEN. If set to PROJECT_ANALYSIS_TOKEN, then the project_key must also be specified.
	// The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER_TOKEN, GLOBAL_ANALYSIS_TOKEN, or PROJECT_ANALYSIS_TOKEN. Defaults to USER_TOKEN. If set to PROJECT_ANALYSIS_TOKEN, then the project_key must also be specified.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type UserTokenObservation struct {

	// MM-DD). If not set, default to no expiration.
	// The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	// The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	LoginName *string `json:"loginName,omitempty" tf:"login_name,omitempty"`

	// (String) The name of the Token to create. Changing this forces a new resource to be created.
	// The name of the Token to create. Changing this forces a new resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	// The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER_TOKEN, GLOBAL_ANALYSIS_TOKEN, or PROJECT_ANALYSIS_TOKEN. Defaults to USER_TOKEN. If set to PROJECT_ANALYSIS_TOKEN, then the project_key must also be specified.
	// The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER_TOKEN, GLOBAL_ANALYSIS_TOKEN, or PROJECT_ANALYSIS_TOKEN. Defaults to USER_TOKEN. If set to PROJECT_ANALYSIS_TOKEN, then the project_key must also be specified.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type UserTokenParameters struct {

	// MM-DD). If not set, default to no expiration.
	// The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
	// +kubebuilder:validation:Optional
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// (String) The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	// The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/globallogicuki/provider-sonarqube/apis/user/v1alpha1.User
	// +kubebuilder:validation:Optional
	LoginName *string `json:"loginName,omitempty" tf:"login_name,omitempty"`

	// Reference to a User in user to populate loginName.
	// +kubebuilder:validation:Optional
	LoginNameRef *v1.Reference `json:"loginNameRef,omitempty" tf:"-"`

	// Selector for a User in user to populate loginName.
	// +kubebuilder:validation:Optional
	LoginNameSelector *v1.Selector `json:"loginNameSelector,omitempty" tf:"-"`

	// (String) The name of the Token to create. Changing this forces a new resource to be created.
	// The name of the Token to create. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	// The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER_TOKEN, GLOBAL_ANALYSIS_TOKEN, or PROJECT_ANALYSIS_TOKEN. Defaults to USER_TOKEN. If set to PROJECT_ANALYSIS_TOKEN, then the project_key must also be specified.
	// The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER_TOKEN, GLOBAL_ANALYSIS_TOKEN, or PROJECT_ANALYSIS_TOKEN. Defaults to USER_TOKEN. If set to PROJECT_ANALYSIS_TOKEN, then the project_key must also be specified.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// UserTokenSpec defines the desired state of UserToken
type UserTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserTokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserTokenInitParameters `json:"initProvider,omitempty"`
}

// UserTokenStatus defines the observed state of UserToken.
type UserTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserToken is the Schema for the UserTokens API. Provides a Sonarqube User token resource. This can be used to manage Sonarqube User tokens.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,sonarqube}
type UserToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   UserTokenSpec   `json:"spec"`
	Status UserTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserTokenList contains a list of UserTokens
type UserTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserToken `json:"items"`
}

// Repository type metadata.
var (
	UserToken_Kind             = "UserToken"
	UserToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserToken_Kind}.String()
	UserToken_KindAPIVersion   = UserToken_Kind + "." + CRDGroupVersion.String()
	UserToken_GroupVersionKind = CRDGroupVersion.WithKind(UserToken_Kind)
)

func init() {
	SchemeBuilder.Register(&UserToken{}, &UserTokenList{})
}
