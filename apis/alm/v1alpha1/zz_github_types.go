// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GitHubInitParameters struct {

	// (String) GitHub App ID. Maximum length: 80
	// GitHub App ID. Maximum length: 80
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (String) GitHub App Client ID. Maximum length: 80
	// GitHub App Client ID. Maximum length: 80
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) GitHub App Client Secret. Maximum length: 160
	// GitHub App Client Secret. Maximum length: 160
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// (String) Unique key of the GitHUb instance setting. Maximum length: 200
	// Unique key of the GitHUb instance setting. Maximum length: 200
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) GitHub App private key. Maximum length: 2500
	// GitHub App private key. Maximum length: 2500
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// (String) GitHub API URL. Maximum length: 2000
	// GitHub API URL. Maximum length: 2000
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) GitHub App Webhook Secret. Maximum length: 160
	// GitHub App Webhook Secret. Maximum length: 160
	WebhookSecret *string `json:"webhookSecret,omitempty" tf:"webhook_secret,omitempty"`
}

type GitHubObservation struct {

	// (String) GitHub App ID. Maximum length: 80
	// GitHub App ID. Maximum length: 80
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (String) GitHub App Client ID. Maximum length: 80
	// GitHub App Client ID. Maximum length: 80
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) GitHub App Client Secret. Maximum length: 160
	// GitHub App Client Secret. Maximum length: 160
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Unique key of the GitHUb instance setting. Maximum length: 200
	// Unique key of the GitHUb instance setting. Maximum length: 200
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) GitHub App private key. Maximum length: 2500
	// GitHub App private key. Maximum length: 2500
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// (String) GitHub API URL. Maximum length: 2000
	// GitHub API URL. Maximum length: 2000
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) GitHub App Webhook Secret. Maximum length: 160
	// GitHub App Webhook Secret. Maximum length: 160
	WebhookSecret *string `json:"webhookSecret,omitempty" tf:"webhook_secret,omitempty"`
}

type GitHubParameters struct {

	// (String) GitHub App ID. Maximum length: 80
	// GitHub App ID. Maximum length: 80
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (String) GitHub App Client ID. Maximum length: 80
	// GitHub App Client ID. Maximum length: 80
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) GitHub App Client Secret. Maximum length: 160
	// GitHub App Client Secret. Maximum length: 160
	// +kubebuilder:validation:Optional
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// (String) Unique key of the GitHUb instance setting. Maximum length: 200
	// Unique key of the GitHUb instance setting. Maximum length: 200
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) GitHub App private key. Maximum length: 2500
	// GitHub App private key. Maximum length: 2500
	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// (String) GitHub API URL. Maximum length: 2000
	// GitHub API URL. Maximum length: 2000
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) GitHub App Webhook Secret. Maximum length: 160
	// GitHub App Webhook Secret. Maximum length: 160
	// +kubebuilder:validation:Optional
	WebhookSecret *string `json:"webhookSecret,omitempty" tf:"webhook_secret,omitempty"`
}

// GitHubSpec defines the desired state of GitHub
type GitHubSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GitHubParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GitHubInitParameters `json:"initProvider,omitempty"`
}

// GitHubStatus defines the observed state of GitHub.
type GitHubStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GitHubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GitHub is the Schema for the GitHubs API. Provides a Sonarqube GitHub Alm/Devops Platform Integration resource. This can be used to create and manage a Alm/Devops Platform Integration for GitHub.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,sonarqube}
type GitHub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appId) || (has(self.initProvider) && has(self.initProvider.appId))",message="spec.forProvider.appId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientId) || (has(self.initProvider) && has(self.initProvider.clientId))",message="spec.forProvider.clientId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientSecret) || (has(self.initProvider) && has(self.initProvider.clientSecret))",message="spec.forProvider.clientSecret is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateKey) || (has(self.initProvider) && has(self.initProvider.privateKey))",message="spec.forProvider.privateKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   GitHubSpec   `json:"spec"`
	Status GitHubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitHubList contains a list of GitHubs
type GitHubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitHub `json:"items"`
}

// Repository type metadata.
var (
	GitHub_Kind             = "GitHub"
	GitHub_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GitHub_Kind}.String()
	GitHub_KindAPIVersion   = GitHub_Kind + "." + CRDGroupVersion.String()
	GitHub_GroupVersionKind = CRDGroupVersion.WithKind(GitHub_Kind)
)

func init() {
	SchemeBuilder.Register(&GitHub{}, &GitHubList{})
}
