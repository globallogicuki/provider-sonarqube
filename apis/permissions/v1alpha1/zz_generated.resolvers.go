// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/globallogicuki/provider-sonarqube/apis/permissiontemplate/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Permissions.
func (mg *Permissions) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TemplateID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TemplateIDRef,
		Selector:     mg.Spec.ForProvider.TemplateIDSelector,
		To: reference.To{
			List:    &v1alpha1.PermissionTemplateList{},
			Managed: &v1alpha1.PermissionTemplate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TemplateID")
	}
	mg.Spec.ForProvider.TemplateID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TemplateIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TemplateID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.TemplateIDRef,
		Selector:     mg.Spec.InitProvider.TemplateIDSelector,
		To: reference.To{
			List:    &v1alpha1.PermissionTemplateList{},
			Managed: &v1alpha1.PermissionTemplate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TemplateID")
	}
	mg.Spec.InitProvider.TemplateID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TemplateIDRef = rsp.ResolvedReference

	return nil
}
